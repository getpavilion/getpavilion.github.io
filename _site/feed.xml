<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pavilion</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://www.pavilion.io/</link>
    <atom:link href="http://www.pavilion.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Feb 2017 23:02:27 +0100</pubDate>
    <lastBuildDate>Sun, 19 Feb 2017 23:02:27 +0100</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Why Pavilion</title>
        <description>&lt;p&gt;Pavilion is a simple CSS framework for developers who tend to never use the countless pre-defined UI components other frameworks ship with. If you are looking for a a simple, lightweight and customizable CSS starting point without the bloat, Pavilion might be for you.&lt;/p&gt;

&lt;p&gt;Pavilion includes tried and tested core settings for readability, accessibility and responsiveness. A versatile yet easy to understand fully responsive grid system to create the layouts you need — including reordering and offsets.&lt;/p&gt;

&lt;p&gt;Typography is calculated trough a modular type calculator and common elements like forms, buttons, tables and lists have appealing yet minimal styling which makes them easy to customize. When it comes to customizing, you can tweak and configure the &lt;code class=&quot;highlighter-rouge&quot;&gt;variables.scss&lt;/code&gt; file to make Pavilion just how you want it to be. Lastly Pavilion includes handy tools and utilities like a viewport indicator and common helper classes to speed up production. All carefully picked to avoid bloat.&lt;/p&gt;

&lt;p&gt;Pavilion lays down the groundwork — the rest is up to you.&lt;/p&gt;

&lt;h5 id=&quot;tldr&quot;&gt;TLDR;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Lightweight. Only 26kb minified.&lt;/li&gt;
  &lt;li&gt;Versatile fully responsive grid system.&lt;/li&gt;
  &lt;li&gt;Responsive, modular typography.&lt;/li&gt;
  &lt;li&gt;Only basic elements with minimal styling.&lt;/li&gt;
  &lt;li&gt;Tools &amp;amp; utilities to speed up production.&lt;/li&gt;
  &lt;li&gt;Tried and tested core settings.&lt;/li&gt;
  &lt;li&gt;Easy to customize.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 01 Aug 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v2/2016/08/01/why-pavilion-v2.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v2/2016/08/01/why-pavilion-v2.html</guid>
        
        
        <category>v2</category>
        
      </item>
    
      <item>
        <title>Getting started</title>
        <description>&lt;p&gt;First of all, thanks for checking out Pavilion! Now let’s get you started. Here are four options to include Pavilion in your project.&lt;/p&gt;

&lt;h5 id=&quot;download&quot;&gt;Download&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/getpavilion/pavilion/archive/master.zip&quot; rel=&quot;nofollow&quot; download=&quot;&quot;&gt;
    &lt;button class=&quot;button button-default&quot;&gt;Source package&lt;/button&gt;
&lt;/a&gt;
&lt;a href=&quot;https://raw.githubusercontent.com/getpavilion/pavilion/master/dist/pavilion.min.css&quot; rel=&quot;nofollow&quot; download=&quot;&quot;&gt;
    &lt;button class=&quot;button button-default&quot;&gt;Compiled CSS&lt;/button&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;cdn-link&quot;&gt;CDN link&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/pavilion/2.0.1/pavilion.min.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;install-with-npm&quot;&gt;Install with NPM&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;npm install pavilion&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;install-with-bower&quot;&gt;Install with Bower&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;bower install pavilion&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pavilion-source-files&quot;&gt;Pavilion source files&lt;/h3&gt;
&lt;p&gt;When installing Pavilion with NPM, Bower or the source download, the following structure is delivered.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;pavilion/
├── dist/
│   ├── pavilion.css
│   ├── pavilion.min.css
│   ├── pavilion.min.css.map
├── demo/
│   ├── demo project files
├── scss/
│   ├── pavilion.scss
│   └── pavilion-parts/
│       ├── _base.scss
│       ├── _buttons.scss
│       ├── _forms.scss
│       ├── _functions.scss
│       ├── _grid.scss
│       ├── _lists.scss
│       ├── _mixins.scss
│       ├── _normalize.scss
│       ├── _tables.scss
│       ├── _typography.scss
│       ├── _utilities.scss
│       └── _variables.scss
├── README.md
├── CHANGELOG.md
├── license
├── gulpfile.js
└── package.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For consistent browser behaviour Pavilion ships with &lt;strong&gt;normalize.css&lt;/strong&gt;, a collection of HTML element and attribute style-normalizations by Nicolas Gallagher and Jonathan Neal.
See their documentation &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v2/2016/03/31/getting-started-v2.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v2/2016/03/31/getting-started-v2.html</guid>
        
        
        <category>v2</category>
        
      </item>
    
      <item>
        <title>Getting started</title>
        <description>&lt;p&gt;First of all, thanks for checking out Pavilion! Now let’s get you started. Here are four options to include Pavilion in your project.&lt;/p&gt;

&lt;h5 id=&quot;get-the-source-package&quot;&gt;Get the source package&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/getpavilion/pavilion/archive/v1.0.31.zip&quot; rel=&quot;nofollow&quot; download=&quot;&quot;&gt;
    &lt;button class=&quot;button-default&quot;&gt;Download v1.0.31&lt;/button&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;install-with-npm&quot;&gt;Install with NPM&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;npm install pavilion@1.0.31&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;install-with-bower&quot;&gt;Install with Bower&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;bower install pavilion#1.0.31&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pavilion-source-files&quot;&gt;Pavilion source files&lt;/h3&gt;
&lt;p&gt;When installing Pavilion with NPM, Bower or the source download, the following structure is delivered.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;pavilion/
├── dist/
│   ├── pavilion.css
│   ├── pavilion.min.css
│   ├── pavilion.min.css.map
├── demo/
│   ├── demo project files
├── scss/
│   ├── pavilion.scss
│   └── parts/
│       ├── _base.scss
│       ├── _buttons.scss
│       ├── _flexbox.scss
│       ├── _forms.scss
│       ├── _grid.scss
│       ├── _helpers.scss
│       ├── _lists.scss
│       ├── _mixins.scss
│       ├── _normalize.scss
│       ├── _tables.scss
│       ├── _typography.scss
│       └── _variables.scss
├── README.md
├── CHANGELOG.md
├── license
├── gruntfile.js
└── package.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For consistent browser behaviour Pavilion ships with &lt;strong&gt;normalize.css&lt;/strong&gt;, a collection of HTML element and attribute style-normalizations by Nicolas Gallagher and Jonathan Neal.
See their documentation &lt;a href=&quot;http://necolas.github.io/normalize.css/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v1/2016/03/31/getting-started-v1.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v1/2016/03/31/getting-started-v1.html</guid>
        
        
        <category>v1</category>
        
      </item>
    
      <item>
        <title>Breakpoints</title>
        <description>&lt;p&gt;Pavilion’s grid system works with four breakpoints which break between common device screen widths:&lt;/p&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th&gt;Device &amp;amp; orientation&lt;/th&gt; 
            &lt;th&gt;Active on&lt;/th&gt; 
            &lt;th&gt;Class usage&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td&gt;Phone Portrait&lt;/td&gt; 
            &lt;td&gt;Smaller than &lt;strong&gt;phone landscape&lt;/strong&gt;&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-pp-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
            &lt;td&gt;Phone Landscape&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;540px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-pl-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Tablet Portrait&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;768px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-tp-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Tablet Landscape&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;991px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-tl-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Desktop&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;1200px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-dt-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;   
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The breakpoint classes are derived from their respective devices and orientations.
The &lt;strong&gt;Phone Portrait&lt;/strong&gt; breakpoint uses the &lt;strong&gt;Phone Landscape&lt;/strong&gt; width as it’s maximum width.&lt;/p&gt;

&lt;p&gt;The breakpoints can be adjusted in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_variables.scss&lt;/code&gt;, which is included in the source download and NPM/Bower installations. 
See &lt;a data-scroll=&quot;&quot; href=&quot;#gettingstarted&quot;&gt;getting started&lt;/a&gt; for those installations or the &lt;a data-scroll=&quot;&quot; href=&quot;#customizing&quot;&gt;customizing&lt;/a&gt; section for the variables.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v2/2016/03/31/media-queries-v2.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v2/2016/03/31/media-queries-v2.html</guid>
        
        
        <category>v2</category>
        
      </item>
    
      <item>
        <title>Breakpoints</title>
        <description>&lt;p&gt;Pavilion’s grid system works with four breakpoints which break between common device screen widths:&lt;/p&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th&gt;Device &amp;amp; orientation&lt;/th&gt; 
            &lt;th&gt;Active on&lt;/th&gt; 
            &lt;th&gt;Class usage&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td&gt;Phone Portrait&lt;/td&gt; 
            &lt;td&gt;Smaller than &lt;strong&gt;phone landscape&lt;/strong&gt;&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-pp-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
            &lt;td&gt;Phone Landscape&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;540px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-pl-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Tablet Portrait&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;768px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-tp-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Tablet Landscape&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;991px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-tl-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td&gt;Desktop&lt;/td&gt; 
            &lt;td&gt;&lt;strong&gt;1200px&lt;/strong&gt; and larger&lt;/td&gt; 
            &lt;td&gt;&lt;code&gt;*-dt-*&lt;/code&gt;&lt;/td&gt; 
        &lt;/tr&gt;   
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The breakpoint classes are derived from their respective devices and orientations.
The &lt;strong&gt;Phone Portrait&lt;/strong&gt; breakpoint uses the &lt;strong&gt;Phone Landscape&lt;/strong&gt; width as it’s maximum width.&lt;/p&gt;

&lt;p&gt;The breakpoints can be adjusted in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_variables.scss&lt;/code&gt;, which is included in the source download and NPM/Bower installations. 
See &lt;a data-scroll=&quot;&quot; href=&quot;#gettingstarted&quot;&gt;getting started&lt;/a&gt; for those installations or the &lt;a data-scroll=&quot;&quot; href=&quot;#configuring&quot;&gt;configuring&lt;/a&gt; section for the variables.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v1/2016/03/31/media-queries-v1.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v1/2016/03/31/media-queries-v1.html</guid>
        
        
        <category>v1</category>
        
      </item>
    
      <item>
        <title>Containers</title>
        <description>&lt;p&gt;To keep all your elements packed in consistent left and right paddings you should wrap
them in containers. Basically you have three types of containers.&lt;/p&gt;

&lt;h5 id=&quot;standard-fixed-width-container&quot;&gt;Standard (fixed width) container&lt;/h5&gt;
&lt;p&gt;This container has a default max-width of 1140px and is centered in the viewport.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: 1140px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;full-width-container&quot;&gt;Full width container&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-full-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: 100% --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;smaller-containers-matches-breakpoints&quot;&gt;Smaller containers (matches breakpoints)&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-pl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: phone landscape / 540px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-tp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: tablet portrait / 768px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-tl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: tablet landscape / 991px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Breakpoint specific container are of good use when creating narrow designs. They behave like standard containers but
have a smaller max-width.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v2/2016/03/31/containers-v2.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v2/2016/03/31/containers-v2.html</guid>
        
        
        <category>v2</category>
        
      </item>
    
      <item>
        <title>Containers</title>
        <description>&lt;p&gt;To keep all your elements packed in consistent left and right paddings you should wrap
them in containers. Basically you have three types of containers.&lt;/p&gt;

&lt;h5 id=&quot;standard-fixed-width-container&quot;&gt;Standard (fixed width) container&lt;/h5&gt;
&lt;p&gt;This container has a default max-width of 1140px and is centered in the viewport.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: 1140px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;full-width-container&quot;&gt;Full width container&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-full-width&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: 100% --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;smaller-containers-matches-breakpoints&quot;&gt;Smaller containers (matches breakpoints)&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-pl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: phone landscape / 540px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-tp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: tablet portrait / 768px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container-tl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Container width: tablet landscape / 991px --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Breakpoint specific container are of good use when creating narrow designs. They behave like standard containers but
have a smaller max-width.&lt;/p&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v1/2016/03/31/containers-v1.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v1/2016/03/31/containers-v1.html</guid>
        
        
        <category>v1</category>
        
      </item>
    
      <item>
        <title>Grid</title>
        <description>&lt;p&gt;When creating layouts with columns there are a couple of things to consider. Pavilion leans on the following, common concept:&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; wraps elements and provides you with &lt;strong&gt;left and right padding&lt;/strong&gt; to keep the edges of the screen away
from your content. When placing columns inside containers, negative margin is used to prevent double padding (columns have padding too).
This is done by placing the columns inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;.row&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Columns go here, inside a row to prevent double paddings --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;rules-of-thumb&quot;&gt;Rules of thumb:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Always wrap a row in a container&lt;/li&gt;
  &lt;li&gt;Columns within a container must have a row as their first parent to prevent double padding&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;columns&quot;&gt;Columns&lt;/h3&gt;
&lt;p&gt;As stated above: &lt;strong&gt;wrap columns in a row&lt;/strong&gt; to prevent double padding. Although there is one exception. That is when you don’t use a container,
you don’t wrap your columns in a row. This would remove the padding along the edges of your screen.&lt;/p&gt;

&lt;h5 id=&quot;column-widths&quot;&gt;Column widths&lt;/h5&gt;
&lt;hr style=&quot;opacity: 0; margin: 10px 0;&quot; /&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-10&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-10&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-90&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-90&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-20&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-20&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-80&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-80&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-25&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-25&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-75&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-75&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-30&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-30&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-70&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-70&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-33&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-33&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-66&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-40&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-40&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-60&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-60&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-50&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-50&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-50&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-50&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-100&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-100&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;responsive-columns&quot;&gt;Responsive columns&lt;/h3&gt;
&lt;p&gt;To create a flexible layout you need to be able to set specific column widths per breakpoint. Pavilion uses a common concept to do this.
Just add the breakpoint’s abbreviation class to the column. Does that sound confusing? It’s easy, look:&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-50 col-tl-33&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-pl-50 .col-tl-33&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-50 col-tl-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-pl-50 .col-tl-66&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-pl-50 col-tl-33&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 33.3333% width on &#39;tablet landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 50% width on &#39;phone landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 100% width on smaller than &#39;phone landscape&#39; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-pl-50 col-tl-66&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 66.6666% width on tablet landscape or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 50% width on &#39;phone landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 100% width on smaller than &#39;phone landscape&#39; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The columns above will span a width of 33% and 66% when the viewport is equal or larger than &lt;strong&gt;tablet landscape&lt;/strong&gt; (hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;*-tl-*&lt;/code&gt;).
When the viewport gets smaller, they’ll both span a width of 50% until the screensize drops below &lt;strong&gt;phone landscape&lt;/strong&gt;.
You can add column classes for each breakpoint to create fitting layouts. When a column breaks out of its breakpoint it will default to 100% width. See the &lt;a href=&quot;#breakpoints&quot; data-scroll=&quot;&quot;&gt;breakpoints&lt;/a&gt; section for more information about 
breakpoints and screensizes.&lt;/p&gt;

&lt;h5 id=&quot;reordering-columns&quot;&gt;Reordering columns&lt;/h5&gt;

&lt;p&gt;You can reorder columns per breakpoint. To shift columns to the left and right you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;push-*-*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pull-*-*&lt;/code&gt;.
Push and pull makes use of the left and right CSS properties and won’t actually push other content or columns away.&lt;/p&gt;

&lt;p&gt;These classes are breakpoint specific. So for example: adding the class &lt;code class=&quot;highlighter-rouge&quot;&gt;pull-tp-50&lt;/code&gt; will only pull the column 50% to the left while the tablet portrait breakpoint is active.
It won’t affect other breakpoints.&lt;/p&gt;

&lt;p&gt;The columns below are pushed and pulled around on desktop size (with &lt;code class=&quot;highlighter-rouge&quot;&gt;push-dt-*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pull-dt-*&lt;/code&gt;).
Try to resize the browser and see how the columns below switch around.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-tp-66 push-dt-33&quot;&gt;
        &lt;div class=&quot;exb&quot; style=&quot;background-color: #EFEFEF; color: #426AFB;&quot;&gt;
            .col-tp-66 .push-dt-33
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-tp-33 pull-dt-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;
            .col-tp-33 .pull-dt-66
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h5 id=&quot;offsetting-columns-with-margin&quot;&gt;Offsetting columns with margin&lt;/h5&gt;

&lt;p&gt;Where reordering makes use of the left and right CSS properties, offsetting adds margin to the left of a column and will affect the DOM flow.
Offsets are created by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;offset-*-*&lt;/code&gt; to your column in the same way pulls and pushes are created.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v2/2016/03/31/grid-v2.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v2/2016/03/31/grid-v2.html</guid>
        
        
        <category>v2</category>
        
      </item>
    
      <item>
        <title>Grid</title>
        <description>&lt;p&gt;When creating layouts with columns there are a couple of things to consider. Pavilion leans on the following, common concept:&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; wraps elements and provides you with &lt;strong&gt;left and right padding&lt;/strong&gt; to keep the edges of the screen away
from your content. When placing columns inside containers, negative margin is used to prevent double padding (columns have padding too).
This is done by placing the columns inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;.row&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Columns go here, inside a row to prevent double paddings --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;rules-of-thumb&quot;&gt;Rules of thumb:&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Always wrap a row in a container&lt;/li&gt;
  &lt;li&gt;Columns within a container must have a row as their first parent to prevent double padding&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;columns&quot;&gt;Columns&lt;/h3&gt;
&lt;p&gt;As stated above: &lt;strong&gt;wrap columns in a row&lt;/strong&gt; to prevent double padding. Although there is one exception. That is when you don’t use a container,
you don’t wrap your columns in a row. This would remove the padding along the edges of your screen.&lt;/p&gt;

&lt;h5 id=&quot;column-widths&quot;&gt;Column widths&lt;/h5&gt;
&lt;hr style=&quot;opacity: 0; margin: 10px 0;&quot; /&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-10&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-10&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-90&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-90&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-20&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-20&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-80&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-80&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-25&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-25&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-75&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-75&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-30&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-30&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-70&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-70&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-33&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-33&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-66&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-40&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-40&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-60&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-60&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-50&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-50&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-50&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-50&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-100&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-100&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;columns--breakpoints&quot;&gt;Columns &amp;amp; breakpoints&lt;/h3&gt;
&lt;p&gt;To create a flexible layout you need to be able to set specific column widths per breakpoint. Pavilion uses a common concept to do this.
Just add the breakpoint’s abbreviation class to the column. Does that sound confusing? It’s easy, look:&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-pl-50 col-tl-33&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-pl-50 .col-tl-33&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-50 col-tl-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-pl-50 .col-tl-66&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-pl-50 col-tl-33&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 33.3333% width on &#39;tablet landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 50% width on &#39;phone landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 100% width on smaller than &#39;phone landscape&#39; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-pl-50 col-tl-66&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 66.6666% width on tablet landscape or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 50% width on &#39;phone landscape&#39; or larger --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 100% width on smaller than &#39;phone landscape&#39; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The columns above will span a width of 33% and 66% when the viewport is equal or larger than &lt;strong&gt;tablet landscape&lt;/strong&gt; (hence the &lt;code class=&quot;highlighter-rouge&quot;&gt;*-tl-*&lt;/code&gt;).
When the viewport gets smaller, they’ll both span a width of 50% until the screensize drops below &lt;strong&gt;phone landscape&lt;/strong&gt;.
You can add column classes for each breakpoint to create fitting layouts. When a column breaks out of its breakpoint it will default to 100% width. See the &lt;a href=&quot;#breakpoints&quot; data-scroll=&quot;&quot;&gt;breakpoints&lt;/a&gt; section for more information about 
breakpoints and screensizes.&lt;/p&gt;

&lt;h5 id=&quot;reordering-columns&quot;&gt;Reordering columns&lt;/h5&gt;

&lt;p&gt;You can reorder columns per breakpoint. To shift columns to the left and right you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;push-*-*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pull-*-*&lt;/code&gt;.
Push and pull makes use of the left and right CSS properties and won’t actually push other content or columns away.&lt;/p&gt;

&lt;p&gt;Try resizing your browser. The columns are switched around on desktop and will switch back when they break out of the desktop breakpoint.&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-tp-66 push-dt-33&quot;&gt;
        &lt;div class=&quot;exb&quot; style=&quot;background-color: #EFEFEF; color: #426AFB;&quot;&gt;
            .col-tp-66 .push-dt-33
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-tp-33 pull-dt-66&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;
            .col-tp-33 .pull-dt-66
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h5 id=&quot;offsetting-columns-with-margin&quot;&gt;Offsetting columns with margin&lt;/h5&gt;

&lt;p&gt;Where reordering makes use of the left and right CSS properties, offsetting adds margin to the left of a column and will affect the DOM flow.
Offsets are created by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;offset-*-*&lt;/code&gt; to your column in the same way pulls and pushes are created.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v1/2016/03/31/grid-v1.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v1/2016/03/31/grid-v1.html</guid>
        
        
        <category>v1</category>
        
      </item>
    
      <item>
        <title>Flexbox</title>
        <description>&lt;h5 id=&quot;flexbox-columns&quot;&gt;Flexbox columns&lt;/h5&gt;
&lt;p&gt;Instead of using a &lt;code class=&quot;highlighter-rouge&quot;&gt;.row&lt;/code&gt; to contain your columns, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.row-flex&lt;/code&gt; and apply the Flexbox Layout Model for Pavilion’s columns.
Flex-columns take up the maximum possible width. The normal column classes still apply within the ‘flexboxed’ row. To use a flex-column add a div
with the class &lt;code class=&quot;highlighter-rouge&quot;&gt;.col&lt;/code&gt; inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;.row-flex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please read the &lt;a href=&quot;#grid&quot; data-scroll=&quot;&quot;&gt;grid&lt;/a&gt; documentation first if you haven’t done so.&lt;/p&gt;

&lt;div class=&quot;row-flex&quot;&gt;
    &lt;div class=&quot;col-pl-20&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-20&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-33&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-33&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row-flex&quot;&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-pl-40&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col-*-40&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col&quot;&gt;
        &lt;div class=&quot;exb&quot;&gt;.col&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h5 id=&quot;flexbox-elements&quot;&gt;Flexbox elements&lt;/h5&gt;
&lt;p&gt;Apply the class &lt;code class=&quot;highlighter-rouge&quot;&gt;.display-flex&lt;/code&gt; to create a flexbox container element. You can now use flex utility classes to align and arrange the contained items according to the
Flex Box Layout Model. Pavilion has classes for most of the specs’ properties. Since it is useless to create classes for properties like flex grow, 
shrink, basis and order, these are not included. Want to learn more about flexbox? Check out &lt;a href=&quot;https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties#flexbox-container-properties&quot; target=&quot;_blank&quot;&gt;this handy tutorial by Scotch.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, centering horizontally and vertically is easy with flexbox:&lt;/p&gt;
&lt;div class=&quot;display-flex exfb flex-align-items-center flex-justify-content-center&quot;&gt;
    &lt;button class=&quot;button-default&quot;&gt;I am centered X and Y&lt;/button&gt;
&lt;/div&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Display flex&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.display-flex&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Creates flex container&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.display-inline-flex&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Creates inline flex container&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.row-flex&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Creates row flex container (for columns)&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Flex direction&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt;
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-direction-row&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Set main axis direction left to right &lt;span class=&quot;text-primary&quot;&gt;(default)&lt;/span&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-direction-row-reverse&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Set main axis direction right to left&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-direction-column&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Set main axis direction top to bottom&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-direction-column-reverse&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Set main axis direction bottom to top&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Flex wrap&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-no-wrap&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Keep flex children on a single-line &lt;span class=&quot;text-primary&quot;&gt;(default)&lt;/span&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-wrap&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Wrap flex children to multiple lines&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-wrap-reverse&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Same as above, but bottom to top&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Justify content (main axis)&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-justify-content-start&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items towards the main axis&#39; start &lt;span class=&quot;text-primary&quot;&gt;(default)&lt;/span&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-justify-content-end&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items towards the main axis&#39; end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-justify-content-center&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items between the main axis&#39; start/end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-justify-content-between&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Distribute items between the main axis&#39; start/end, space between&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-justify-content-around&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Distribute items between the main axis&#39; start/end, space around&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Align items (cross axis)&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-items-stretch&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Stretch items along the cross-axis &lt;span class=&quot;text-primary&quot;&gt;(default)&lt;/span&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-items-start&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items towards the cross-axis&#39; start&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-items-end&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items towards the cross-axis&#39; end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-items-center&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items between the cross-axis&#39; start/end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-items-baseline&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align items to their baselines&lt;/td&gt; 
        &lt;/tr&gt; 
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Align multiple lines (cross axis)&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-stretch&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Stretch multiline contents along the cross-axis &lt;span class=&quot;text-primary&quot;&gt;(default)&lt;/span&gt;&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-start&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align multiline contents towards the cross-axis&#39; start&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-end&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align multiline contents towards the cross-axis&#39; end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-center&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align multiline contents between the cross-axis&#39; start/end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-between&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Distribute items between the cross axis&#39; start/end, space between&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-content-around&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Distribute items between the cross axis&#39; start/end, space around&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt; 
    &lt;!-- Table head --&gt;
    &lt;thead&gt; 
        &lt;tr&gt; 
            &lt;th class=&quot;cell-fixed-width&quot;&gt;Align flex child (apply on child)&lt;/th&gt; 
            &lt;th&gt;Behaviour&lt;/th&gt; 
        &lt;/tr&gt; 
    &lt;/thead&gt;
    
    &lt;!-- Table body --&gt;
    &lt;tbody&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-self-start&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align flex child towards the cross-axis&#39; start&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-self-end&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align flex child towards the cross-axis&#39; end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-self-center&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align flex child between the cross-axis&#39; start/end&lt;/td&gt; 
        &lt;/tr&gt;
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-self-baseline&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Align flex child to flex baselines&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
            &lt;td class=&quot;cell-fixed-width&quot;&gt;&lt;code&gt;.flex-align-self-stretch&lt;/code&gt;&lt;/td&gt; 
            &lt;td&gt;Stretch flex child along the cross-axis&lt;/td&gt; 
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Breaking changes from  v1.0.28 and up&lt;/strong&gt;&lt;br /&gt;
Version 1.0.27 had different classes for the Flexbox Layout Model. Version 1.0.28 came with new classes which reflect
the purpose and usage of the Flexbox Layout Model much more accurate. You can still use the old classes, for now. They will be
discarted in the future. So it is adviced to update your classes if you have used flexbox utilities. The deprecated classes can be found &lt;a href=&quot;https://gist.github.com/getpavilion/c426df29e4d44a18d06a6a34e900cbff&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 Mar 2016 17:06:26 +0200</pubDate>
        <link>http://www.pavilion.io/v1/2016/03/31/flexbox-v1.html</link>
        <guid isPermaLink="true">http://www.pavilion.io/v1/2016/03/31/flexbox-v1.html</guid>
        
        
        <category>v1</category>
        
      </item>
    
  </channel>
</rss>
